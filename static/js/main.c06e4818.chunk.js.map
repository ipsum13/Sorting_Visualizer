{"version":3,"sources":["reducers/algorithms.js","reducers/array.js","reducers/index.js","actions/types.js","store.js","actions/array.js","components/visualizer/Visualizer.js","algorithms/BubbleSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/SelectionSort.js","actions/algorithms.js","components/DarkMode/Toggle.js","components/DarkMode/DarkModeToggle.js","components/Topbar/Topbar.js","algorithms/InsertionSort.js","App.js","index.js"],"names":["initialState","algorithm","isSorted","array","size","combineReducers","algoritms","state","action","type","payload","name","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","subscribe","getState","WINDOW_HEIGHT","window","innerHeight","generateNewArray","dispatch","i","push","randomIntFromInterval","min","max","Math","floor","random","connect","useEffect","numWidth","$","document","width","margin","color","fontSize","className","map","value","idx","key","style","backgroundColor","height","marginLeft","marginRight","BubbleSort","animations","auxillaryArray","slice","N","length","j","swap","Sort","firstIndex","secondIndex","temp","MergeSort","startIndex","endIndex","middleIndex","sortArray","merge","QuickSort","pivotIndex","pivot","partitionArray","SelectionSort","minIndex","Toggle","checked","onChange","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","toggle","enable","algorithms","setSize","bubbleSort","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","barIndex","newHeight","barStyle","innerText","clientHeight","quickSort","mergeSort","barOneIdx","selectionSort","insertionSort","InsertionSort","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","aria-controls","Collapse","Nav","Link","Button","block","NavDropdown","title","Item","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c06e4818.chunk.js","sourcesContent":["import {\r\n  BUBBLE_SORT,\r\n  QUICK_SORT,\r\n  MERGE_SORT,\r\n  SELECTION_SORT,\r\n  INSERTION_SORT,\r\n} from \"../actions/types\";\r\n\r\n\r\nconst initialState = {\r\n  algorithm: null,\r\n  isSorted: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case BUBBLE_SORT:\r\n    case QUICK_SORT:\r\n    case MERGE_SORT:\r\n    case SELECTION_SORT:\r\n    case INSERTION_SORT:\r\n      return {\r\n        ...state,\r\n        isSorted: true,\r\n        algorithm: payload.name,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n    GENERATE_NEW_ARRAY,\r\n    SET_SIZE\r\n  } from \"../actions/types\";\r\n  \r\n  \r\n  const initialState = {\r\n    array: [],\r\n    size: null,\r\n  };\r\n  \r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case GENERATE_NEW_ARRAY:\r\n        return {\r\n          ...state,\r\n          array: payload.array,\r\n          size: payload.size,\r\n        };\r\n      case SET_SIZE:\r\n          return {\r\n              ...state,\r\n              size: payload.size\r\n          }  \r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import { combineReducers } from 'redux'\r\nimport algoritms from './algorithms';\r\nimport array from './array'\r\n\r\n\r\nexport default combineReducers({\r\n    algoritms,\r\n    array\r\n})","export const BUBBLE_SORT = \"BUBBLE_SORT\";\r\nexport const QUICK_SORT = \"QUICK_SORT\";\r\nexport const MERGE_SORT = \"MERGE_SORT\";\r\nexport const INSERTION_SORT = \"INSERTION_SORT\";\r\nexport const SELECTION_SORT = \"SELECTION_SORT\";\r\nexport const HEAP_SORT = \"HEAP_SORT\";\r\nexport const SHELL_SORT = \"SHELL_SORT\";\r\nexport const SET_SIZE = \"SET_SIZE\";\r\nexport const GENERATE_NEW_ARRAY = \"GENERATE_NEW_ARRAY\";\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nlet currentState = {\r\n    algorithm: { algorithm: null, isSorted: null, size: null }\r\n  };\r\n\r\nstore.subscribe(() => {\r\n  // keep track of the previous and current state to compare changes\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n});\r\n\r\nexport default store;","import { SET_SIZE, GENERATE_NEW_ARRAY } from \"./types\";\r\n\r\n//let WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\n\r\nexport const setSize = (size) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_SIZE,\r\n    payload: size,\r\n  });\r\n  dispatch(generateNewArray(size));\r\n};\r\n\r\nexport const generateNewArray = (size = 10) => (dispatch) => {\r\n  const array = [];\r\n  for (let i = 0; i < size; i++) {\r\n    array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\r\n  }\r\n\r\n  dispatch({\r\n    type: GENERATE_NEW_ARRAY,\r\n    payload: { array, size },\r\n  });\r\n};\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { generateNewArray } from \"../../actions/array\";\r\nimport \"./index.css\";\r\nimport $ from \"jquery\";\r\n\r\nconst Visualizer = ({ array: { array, size }, generateNewArray }) => {\r\n  useEffect(() => {\r\n    generateNewArray();\r\n  }, []);\r\n\r\n  const numWidth = Math.floor($(document).width() / (size * 3));\r\n  const width = `${numWidth}px`;\r\n  const numMargin =\r\n      size < 11\r\n      ? 6\r\n      : size < 26\r\n      ? 4\r\n      : size < 51\r\n      ? 2\r\n      : size < 76\r\n      ? 1.5\r\n      : size < 101\r\n      ? 1\r\n      : 1;\r\n  const margin = `${numMargin}px`;\r\n  const color = numWidth > 20 ? \"white\" : \"transparent\";\r\n  const numFont =\r\n    numWidth > 70\r\n      ? 20\r\n      : numWidth > 60\r\n      ? 18\r\n      : numWidth > 50\r\n      ? 16\r\n      : numWidth > 40\r\n      ? 14\r\n      : numWidth > 30\r\n      ? 12\r\n      : numWidth > 20\r\n      ? 10\r\n      : 8;\r\n  const fontSize = `${numFont}px`;\r\n\r\n  return (\r\n    <div className=\"array-container\">\r\n      {array.map((value, idx) => (\r\n        <div\r\n          className=\"array-bar\"\r\n          key={idx}\r\n          style={{\r\n            backgroundColor: \"lightGreen\",\r\n            height: `${value}px`,\r\n            width: width,\r\n            marginLeft: margin,\r\n            marginRight: margin,\r\n            fontSize: fontSize,\r\n            color: color,\r\n          }}\r\n        >\r\n          {value}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  array: state.array,\r\n});\r\nexport default connect(mapStateToProps, { generateNewArray })(Visualizer);\r\n","export default function BubbleSort(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    Sort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return animations;\r\n    \r\n}\r\n\r\nfunction Sort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i -1; j++) {\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n                animations.push([j, auxillaryArray[j + 1]]);\r\n                animations.push([j + 1, auxillaryArray[j]]);\r\n                swap(auxillaryArray, j, j + 1);\r\n            }\r\n            else {\r\n                animations.push([-1, -1]);\r\n               animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n","export default function MergeSort(array) {\r\n  let animations  = [];\r\n  let auxillaryArray = array.slice();\r\n  Sort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n  array = auxillaryArray;\r\n  return animations;\r\n}\r\n\r\nfunction Sort(auxillaryArray, startIndex, endIndex, animations) {\r\n  if(startIndex === endIndex)\r\n      return;\r\n  const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n  Sort(auxillaryArray, startIndex, middleIndex, animations);\r\n  Sort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n  merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n  let sortArray = [];\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while(i <= middleIndex && j <= endIndex) {\r\n      //Comparing value at ith and jth index so push them to change their color\r\n      animations.push([i, j]);\r\n      //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n      animations.push([i, j]);\r\n      if(auxillaryArray[i] <= auxillaryArray[j]) {\r\n          //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\r\n          animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n          sortArray.push(auxillaryArray[i++]);\r\n      }\r\n      else {\r\n          //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\r\n          animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n          sortArray.push(auxillaryArray[j++]);\r\n      }\r\n  }\r\n  while(i <= middleIndex) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n      sortArray.push(auxillaryArray[i++]);\r\n  }\r\n  while(j <= endIndex) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n      sortArray.push(auxillaryArray[j++]);\r\n  }\r\n  for (let i = startIndex; i <= endIndex; i++) {\r\n      auxillaryArray[i] = sortArray[i - startIndex];\r\n  }\r\n}\r\n","export default function QuickSort(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    Sort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    array = auxillaryArray;\r\n    return animations;\r\n}\r\n\r\n\r\nfunction Sort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        Sort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        Sort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivot = auxillaryArray[endIndex];\r\n    let pivotIndex = startIndex;\r\n    for (let i = startIndex; i <= endIndex - 1; i++) {\r\n        animations.push([i, endIndex]);\r\n        animations.push([i, endIndex]);\r\n        if (auxillaryArray[i] <= pivot) {\r\n            //Swap these two heights\r\n            animations.push([i, auxillaryArray[pivotIndex]]);\r\n            animations.push([pivotIndex, auxillaryArray[i]]);\r\n            swap(auxillaryArray, i , pivotIndex);\r\n            pivotIndex++;\r\n        }\r\n        else {\r\n            animations.push([-1, -1]);\r\n            animations.push([-1, -1]);\r\n        }\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    //Swap these two heights\r\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n    return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n","export default function SelectionSort(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    Sort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return animations;\r\n}\r\n\r\nfunction Sort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n","import {\r\n  BUBBLE_SORT,\r\n  QUICK_SORT,\r\n  MERGE_SORT,\r\n  SELECTION_SORT,\r\n  INSERTION_SORT,\r\n} from \"./types\";\r\n\r\nimport { BubbleSort, MergeSort, SelectionSort, QuickSort, InsertionSort } from \"../algorithms\";\r\n\r\n\r\nconst PRIMARY_COLOR = 'turquoise'; //Normal color of bars\r\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\nexport const bubbleSort = (array) => (dispatch) => {\r\n  \r\n    //disableSortButtons();\r\n    const animations = BubbleSort(array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = (i % 4 === 0) || (i % 4 === 1);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const [barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * ANIMATION_SPEED_MS);\r\n        }\r\n        else {\r\n            const [barIndex, newHeight] = animations[i];\r\n            if (barIndex === -1) {\r\n                continue;\r\n            }\r\n            const barStyle = arrayBars[barIndex].style;\r\n         \r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n                arrayBars[barIndex].innerText = arrayBars[barIndex].clientHeight;\r\n            },i * ANIMATION_SPEED_MS);  \r\n        }\r\n    }\r\n    //const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n    //setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n\r\n  dispatch({\r\n    type: BUBBLE_SORT,\r\n    payload: {name: 'Bubble Sort'}\r\n  });\r\n};\r\n\r\nexport const quickSort = (array) => (dispatch) => {\r\n  //this.disableSortButtons();\r\n  const animations = QuickSort(array);\r\n  for (let i = 0; i < animations.length - 1; i++) {\r\n      const isColorChange = (i % 6 === 0) || (i % 6 === 1);\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if(isColorChange === true) {\r\n          const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          const [barOneIndex, barTwoIndex] = animations[i];\r\n          if(barOneIndex === -1) {\r\n              continue;\r\n          }\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          const barTwoStyle = arrayBars[barTwoIndex].style;\r\n          setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n          },i * ANIMATION_SPEED_MS);\r\n      }\r\n      else {\r\n          const [barIndex, newHeight] = animations[i];\r\n          if (barIndex === -1) {\r\n              continue;\r\n          }\r\n          const barStyle = arrayBars[barIndex].style;\r\n          setTimeout(() => {\r\n              barStyle.height = `${newHeight}px`;\r\n              arrayBars[barIndex].innerText = arrayBars[barIndex].clientHeight;\r\n          },i * ANIMATION_SPEED_MS);  \r\n      }\r\n  }\r\n  // this.setState({array: sortArray})\r\n  //const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n  //setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n  dispatch({\r\n    type: QUICK_SORT,\r\n    payload: {name: 'Quick Sort'}\r\n  });\r\n};\r\n\r\nexport const mergeSort = (array) => (dispatch) => {\r\n  //this.disableSortButtons();\r\n  const animations = MergeSort(array);\r\n  for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = (i % 3 !== 2);\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if(isColorChange === true) {\r\n          const [barOneIndex, barTwoIndex] = animations[i];\r\n          const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          const barTwoStyle = arrayBars[barTwoIndex].style;\r\n          //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\r\n          setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n          },i * ANIMATION_SPEED_MS);\r\n          \r\n      }\r\n      else {\r\n          setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n              arrayBars[barOneIdx].innerText = arrayBars[barOneIdx].clientHeight;\r\n            },i * ANIMATION_SPEED_MS);\r\n      }\r\n  }\r\n  //const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n  //setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n  dispatch({\r\n    type: MERGE_SORT,\r\n    payload: {name: 'Merge Sort'}\r\n  });\r\n};\r\n\r\nexport const insertionSort = (array) => (dispatch) => {\r\n  //disableSortButtons();\r\n        const animations = InsertionSort(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                    arrayBars[barIndex].innerText = arrayBars[barIndex].clientHeight;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        //const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        //setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n  dispatch({\r\n    type: INSERTION_SORT,\r\n    payload: {name: 'Insertion Sort'}\r\n  });\r\n};\r\n\r\nexport const selectionSort = (array) => (dispatch) => {\r\n  // disableSortButtons();\r\n        const animations = SelectionSort(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                    arrayBars[barIndex].innerText = arrayBars[barIndex].clientHeight;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n  dispatch({\r\n    type: SELECTION_SORT,\r\n    payload: {name: 'Selection Sort'}\r\n  });\r\n};\r\n","import React from 'react';\r\n\r\nconst Toggle = ({ checked, onChange }) => (\r\n  <span className=\"toggle-control\">\r\n    <input\r\n      className=\"dmcheck\"\r\n      type=\"checkbox\"\r\n      checked={checked}\r\n      onChange={onChange}\r\n      id=\"dmcheck\"\r\n    />\r\n    <label htmlFor=\"dmcheck\" />\r\n  </span>\r\n);\r\n\r\nexport default Toggle;\r\n","import React from 'react';\r\n\r\nimport Toggle from './Toggle';\r\nimport useDarkMode from 'use-dark-mode';\r\n\r\nconst DarkModeToggle = () => {\r\n  const darkMode = useDarkMode(false);\r\n\r\n  return (\r\n    <div className=\"dark-mode-toggle\">\r\n      <button type=\"button\" onClick={darkMode.disable}>\r\n        ☀\r\n      </button>\r\n      <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\r\n      <button type=\"button\" onClick={darkMode.enable}>\r\n        ☾\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DarkModeToggle;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { generateNewArray, setSize } from \"../../actions/array\";\r\nimport { Navbar, Nav, NavDropdown, Button } from \"react-bootstrap\";\r\nimport {\r\n  bubbleSort,\r\n  insertionSort,\r\n  quickSort,\r\n  mergeSort,\r\n  selectionSort,\r\n} from \"../../actions/algorithms\";\r\nimport DarkModeToggle from \"../DarkMode/DarkModeToggle\";\r\n\r\nconst Topbar = ({\r\n  array: { array, size },\r\n  generateNewArray,\r\n  setSize,\r\n  bubbleSort,\r\n  quickSort,\r\n  mergeSort,\r\n  insertionSort,\r\n  selectionSort,\r\n}) => {\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#\">Sorting Visualizer</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#\">\r\n            <Button\r\n              variant=\"light\"\r\n              block\r\n              onClick={() => generateNewArray(size)}\r\n            >\r\n              Generate New Array\r\n            </Button>\r\n          </Nav.Link>\r\n\r\n          <NavDropdown\r\n            title=\"Size\"\r\n            id=\"collasible-nav-dropdown\"\r\n            className=\"m-2\"\r\n          >\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => setSize(10)}>\r\n                Size 10\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => setSize(25)}>\r\n                Size 25\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => setSize(50)}>\r\n                Size 50\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => setSize(75)}>\r\n                Size 75\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => setSize(100)}>\r\n                Size 100\r\n              </Button>\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown\r\n            title=\"Sorting Algorithm\"\r\n            id=\"collasible-nav-dropdown\"\r\n            className=\"m-2\"\r\n          >\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => bubbleSort(array)}>\r\n                Bubble Sort\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => quickSort(array)}>\r\n                Quick Sort\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button variant=\"light\" block onClick={() => mergeSort(array)}>\r\n                Merge Sort\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button\r\n                variant=\"light\"\r\n                block\r\n                onClick={() => selectionSort(array)}\r\n              >\r\n                Selection Sort\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#\">\r\n              <Button\r\n                variant=\"light\"\r\n                block\r\n                onClick={() => insertionSort(array)}\r\n              >\r\n                Insertion Sort\r\n              </Button>\r\n            </NavDropdown.Item>\r\n            {/* <NavDropdown.Item href=\"#\"><Button variant=\"light\" block onClick={() => bubbleSort(array)}>Bubble Sort</Button></NavDropdown.Item> */}\r\n          </NavDropdown>\r\n        </Nav>\r\n        <Nav>\r\n          <div>\r\n            <DarkModeToggle />\r\n          </div>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  array: state.array,\r\n  algorithm: state.algorithms,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  generateNewArray,\r\n  setSize,\r\n  bubbleSort,\r\n  quickSort,\r\n  mergeSort,\r\n  selectionSort,\r\n  insertionSort,\r\n})(Topbar);\r\n","export default function InsertionSort(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    Sort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return animations;\r\n}\r\n\r\nfunction Sort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"react-bootstrap\";\nimport store from \"./store\";\nimport \"./styles.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Visualizer from \"./components/visualizer/Visualizer\";\nimport Topbar from \"./components/Topbar/Topbar\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <Topbar />\n\n        <Visualizer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import './index.css'\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}